import{_ as k,c as d,b as t,a as i,d as a,e as l,r as p,o as r,f as h}from"./app-Bb1tC85q.js";const A={},c={class:"vp-file-tree"},g={class:"tree-node folder"},E={class:"tree-node file"},D={class:"tree-node file"},y={class:"tree-node file"},o={class:"tree-node file"},m={class:"tree-node file"},C={class:"tree-node file"},u={class:"tree-node file"},B={class:"tree-node file"},v={class:"tree-node file"},_={class:"tree-node file"},b={class:"tree-node file"},T={class:"vp-file-tree"},R={class:"tree-node folder"},O={class:"tree-node file"},M={class:"tree-node file"},U={class:"tree-node file"},f={class:"tree-node file"},P={class:"tree-node file"},N={class:"tree-node file"},S={class:"tree-node file"},I={class:"tree-node file"},F={class:"tree-node file"},x={class:"tree-node file"},K={class:"tree-node file"},q={class:"tree-node file"},L={class:"tree-node file"};function H($,s){const e=p("VPIcon"),n=p("FileTreeItem");return r(),d("div",null,[s[31]||(s[31]=t('<p>cmake 各变量名字</p><p>PROJECT_SOURCE_DIR 表示当前项目的根目录也就是当前cmakelist文件所在路径。调用project(xxx)指定项目后的源代码目录</p><p>PROJECT_BINARY_DIR 项目的构建目录通常都在构建文件夹下(build)文件夹下 当使用Bbuild 或指定构建文件夹.</p><p>CMAKE_CURRENT_SOURCE_DIR 表示当前CMakeLists.txt 所在的源码目录 CMAKE_CURRENT_BINARY_DIR 表示当前输出目录的位置</p><p>CMAKE_SOURCE_DIR：根项目源码路径最外层cmakeList（存放main.cpp的地方） CMAKE_BINARY_DIR：根项目输出路径（存放main.exe的地方）</p><p>PROJECT_IS_TOP_LEVEL：BOOL类型，表示当前项目是否是（最顶层的）根项目 PROJECT_NAME：当前项目名 CMAKE_PROJECT_NAME：根项目的项目名</p><p>EXECUTABLE_OUTPUT_PATH 可执行文件的输出路径(旧变量不建议使用，可能不生效) CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE 使用此项代替</p><p>LIBRARY_OUTPUT_PATH 库文件的输出路径(旧变量不建议使用，可能不生效) CMAKE_ARCHIVE_OUTPUT_DIRECTORY 静态库输出路径 CMAKE_LIBRARY_OUTPUT_DIRECTORY 动态库输出路径</p><p>小技巧：CMake 的 ${} 表达式可以嵌套</p><p>CMAKE_CXX_STANDARD 是一个整数，表示要用的 C++ 标准。 比如需要 C++17 那就设为 17，需要 C++23 就设为 23。</p><p>CMAKE_CXX_STANDARD_REQUIRED 是 BOOL 类型，可以为 ON 或 OFF，默认OFF。 他表示是否一定要支持你指定的 C++ 标准：如果为 OFF 则 CMake 检测到编译器不支持 C++17 时不报错，而是默默调低到 C++14 给你用；为 ON 则发现不支持报错，更安全。 通常我们设为ON。 CMAKE_CXX_EXTENSIONS 也是 BOOL 类型，默认为 ON。 设为 ON 表示启用 GCC 特有的一些扩展功能；OFF 则关闭 GCC 的扩展功能，只使用标准的 C++。 要兼容其他编译器（如 MSVC）的项目，都会设为 OFF 防止不小心用了 GCC 才有的特性。 通常我们设为OFF</p><p>CMAKE_BUILD_TOOL: 执行构建过程的工具。该变量设置为CMake构建时输出所需的程序。对于VS 6， CMAKE_BUILD_TOOL设置为msdev， 对于Unix，它被设置为make 或 gmake。 对于 VS 7， 它被设置为devenv. 对于Nmake构建文件，它的值为nmake。 CMAKE_DL_LIBS: 包含dlopen和dlclose的库的名称。 CMAKE_COMMAND: 指向cmake可执行程序的全路径。 CMAKE_CTEST_COMMAND: 指向ctest可执行程序的全路径。 CMAKE_EDIT_COMMAND: cmake-gui或ccmake的全路径。 CMAKE_EXECUTABLE_SUFFIX: 该平台上可执行程序的后缀。 CMAKE_SIZEOF_VOID_P: void指针的大小。 CMAKE_SKIP_RPATH: 如果为真，将不添加运行时路径信息。默认情况下是如果平台支持运行时信息，将会添加运行时信息到可执行程序当中。这样从构建树中运行程序将很容易。为了在安装过程中忽略掉RPATH，使用CMAKE_SKIP_INSTALL_RPATH。 CMAKE_GENERATOR: 构建工程的产生器。它将产生构建文件 (e.g. &quot;Unix Makefiles&quot;, &quot;Visual Studio 2019&quot;, etc.)</p><p>从指定目录中搜寻源文件，并将它们存入变量SRC_LIST和CW_SRC_LIST中</p><div class="language-cmake" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">aux_source_directory</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> SRC_LIST)</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">aux_source_directory</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/cw/src CW_SRC_LIST)</span></span></code></pre></div><p>此命令不会递归查找子目录,只会识别.cpp .cc .cxx 不会识别.hpp .h文件 同样CMake 无法生成知道何时添加了新的源文件此时需要重新运行 CMake 一般用作</p><blockquote><p>显式模板实例化的项目。模板实例化文件可以存储在 Template 子目录中，并使用此命令自动收集，以避免手动列出所有实例化</p></blockquote><p>最简单的例子</p><p>获取所有源文件进行编译 有如下文件结构</p>',18)),i("div",c,[i("ul",null,[a(n,{type:"folder",expanded:!0,empty:!1},{default:l(()=>[i("span",g,[a(e,{name:"vscode-icons:default-folder"}),s[0]||(s[0]=i("span",{class:"name"},"helloproject",-1))]),i("ul",null,[a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",E,[a(e,{name:"vscode-icons:default-file"}),s[1]||(s[1]=i("span",{class:"name"},"build",-1)),s[2]||(s[2]=i("span",{class:"comment"},[i("br"),h(" -...省略")],-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",D,[a(e,{name:"vscode-icons:default-file"}),s[3]||(s[3]=i("span",{class:"name"},"src",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",y,[a(e,{name:"vscode-icons:file-type-cpp"}),s[4]||(s[4]=i("span",{class:"name"},"demo1.cpp",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",o,[a(e,{name:"vscode-icons:file-type-cpp"}),s[5]||(s[5]=i("span",{class:"name"},"demo2.cxx",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",m,[a(e,{name:"vscode-icons:file-type-c"}),s[6]||(s[6]=i("span",{class:"name"},"demo3.h",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",C,[a(e,{name:"vscode-icons:file-type-cppheader"}),s[7]||(s[7]=i("span",{class:"name"},"demo4.hpp",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>s[8]||(s[8]=[i("span",{class:"tree-node file"},[i("span",{class:"name"},"...")],-1)])),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",u,[a(e,{name:"vscode-icons:default-file"}),s[9]||(s[9]=i("span",{class:"name"},"src2",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",B,[a(e,{name:"vscode-icons:file-type-cpp"}),s[10]||(s[10]=i("span",{class:"name"},"demo3.cpp",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",v,[a(e,{name:"vscode-icons:file-type-text"}),s[11]||(s[11]=i("span",{class:"name"},"CmakeLists.txt",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",_,[a(e,{name:"vscode-icons:file-type-json"}),s[12]||(s[12]=i("span",{class:"name"},"CmakePresets.json",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",b,[a(e,{name:"vscode-icons:file-type-cpp"}),s[13]||(s[13]=i("span",{class:"name"},"hello.cpp",-1))])]),_:1})])]),_:1})])]),s[32]||(s[32]=t(`<p>添加src文件夹下所有文件进行编译</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">cmake_minimum_required</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VERSION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 3.5.0)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(CMAKE_CXX_STANDARD 23)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(CMAKE_CXX_STANDARD_REQUIRED </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(CMAKE_CXX_EXTENSIONS </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">OFF</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">project</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(hello)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(STATUS </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;PROJECT_SOURCE_DIR目录为=\${PROJECT_SOURCE_DIR}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(STATUS </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;PROJECT_BINARY_DIR目录为=\${PROJECT_BINARY_DIR}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">aux_source_directory</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/src SRC_LIST)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include_directories</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(src)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(STATUS </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;源码路径SRC_LIST文件=\${SRC_LIST}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_executable</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(hello main.cpp </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${SRC_LIST}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="列出所有源码" tabindex="-1"><a class="header-anchor" href="#列出所有源码"><span>列出所有源码</span></a></h3><div class="language-cmake" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">file</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(GLOB_RECURSE/GLOB  &lt;变量名&gt;  op(可选项):[CONFIGURE_DEPENDS] &lt;expr-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">path</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;)</span></span></code></pre></div><p>是一个用来匹配指定路径下所有符合通配符条件的文件的命令。 GLOB_RECURSE 是递归查找目录下的所有文件， GLOB 则只在指定文件下 CONFIGURE_DEPENDS 标记依赖 当文件夹下新增文件时cmake会重新编译添加进文件 expr-path 简单的正则表达式表示的路径 file() 命令则可以用来获取文件列表</p><p>file(GLOB_RECURSE SOURCES src/<em>.cpp include/</em>.h) 递归地查找 src 和 include 目录下所有以 .cpp 或 .h 结尾的文件，并将它们存储在 SOURCES 变量中。然后，add_executable 命令使用 SOURCES 变量中的文件来生成可执行文件</p><h3 id="引入第三方静态库" tabindex="-1"><a class="header-anchor" href="#引入第三方静态库"><span>引入第三方静态库</span></a></h3><p>以spdlog为例子 此类库基本为头文件库体积不打使用子模块构建</p><div class="language-powershell" data-ext="powershell" data-title="powershell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">git submodule add </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">path</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">仓库地址 注意仓库的分支默认是拉取默认分支</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">git submodule add </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">b </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">branch</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">repository</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">path</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  选择分支拉取</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">git submodule add git</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">github.com</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:gabime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spdlog.git</span></span></code></pre></div><div class="language-cmake" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_subdirectory</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(spdlog) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#添加子项目 相对当前cmakelist所在文件夹的相对路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include_directories</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(spdlog/include/spdlog) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#包含头文件</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_executable</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(hello main.cpp )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">target_link_libraries</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(hello spdlog) 链接库</span></span></code></pre></div><p>find_libary</p><p>应用于单纯的二进制包，没有配置文件，或者本地项目构建出的库.以下以本地构建的库为例</p>`,12)),i("div",T,[i("ul",null,[a(n,{type:"folder",expanded:!0,empty:!1},{default:l(()=>[i("span",R,[a(e,{name:"vscode-icons:default-folder"}),s[14]||(s[14]=i("span",{class:"name"},"helloproject",-1))]),i("ul",null,[a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",O,[a(e,{name:"vscode-icons:default-file"}),s[15]||(s[15]=i("span",{class:"name"},"build",-1)),s[16]||(s[16]=i("span",{class:"comment"},[i("br"),h(" -...省略")],-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",M,[a(e,{name:"vscode-icons:default-file"}),s[17]||(s[17]=i("span",{class:"name"},"src",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",U,[a(e,{name:"vscode-icons:file-type-cpp"}),s[18]||(s[18]=i("span",{class:"name"},"demo1.cpp",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>s[19]||(s[19]=[i("span",{class:"tree-node file"},[i("span",{class:"name"},"...")],-1)])),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",f,[a(e,{name:"vscode-icons:default-file"}),s[20]||(s[20]=i("span",{class:"name"},"lib",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",P,[a(e,{name:"vscode-icons:default-file"}),s[21]||(s[21]=i("span",{class:"name"},"mylib.dll(构建后生成)",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",N,[a(e,{name:"vscode-icons:default-file"}),s[22]||(s[22]=i("span",{class:"name"},"mylib",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",S,[a(e,{name:"vscode-icons:default-file"}),s[23]||(s[23]=i("span",{class:"name"},"build",-1)),s[24]||(s[24]=i("span",{class:"comment"}," -...构建文件(省略)",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",I,[a(e,{name:"vscode-icons:file-type-c"}),s[25]||(s[25]=i("span",{class:"name"},"mylib.h",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",F,[a(e,{name:"vscode-icons:file-type-cpp"}),s[26]||(s[26]=i("span",{class:"name"},"mylib.cpp",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",x,[a(e,{name:"vscode-icons:file-type-text"}),s[27]||(s[27]=i("span",{class:"name"},"CmakeLists.txt",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",K,[a(e,{name:"vscode-icons:file-type-text"}),s[28]||(s[28]=i("span",{class:"name"},"CmakeLists.txt",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",q,[a(e,{name:"vscode-icons:file-type-json"}),s[29]||(s[29]=i("span",{class:"name"},"CmakePresets.json",-1))])]),_:1}),a(n,{type:"file",expanded:!1,empty:!0},{default:l(()=>[i("span",L,[a(e,{name:"vscode-icons:file-type-cpp"}),s[30]||(s[30]=i("span",{class:"name"},"hello.cpp",-1))])]),_:1})])]),_:1})])]),s[33]||(s[33]=t(`<p>在路径helloproject/lib/CmakeLists.txt 中</p><div class="language-cmake" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#设置库路径</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#指定库生成路径</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> \${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/lib)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CMAKE_LIBRARY_OUTPUT_DIRECTORY</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> \${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/lib)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(LIB_SRC </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${PROJECT}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/lib/mylib.cpp)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#生成dll</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(testshared SHARED </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${LIB_SRC}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#生成库的名字(也可以指定其他属性)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set_target_properties</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(testshared PROPERTIES </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OUTPUT_NAME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &quot;test&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre></div><p>在路径helloproject/lib/build/中 执行命令构建目标库</p><div class="language-powershell" data-ext="powershell" data-title="powershell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cmake .</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">G</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Ninja</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">  //</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">生成构建系统 最好指定使用toolchain.cmake配置指定编译器而不是让cmake寻找编译器可能会找到意料之外编译器或版本</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cmake </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">--</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">build </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">  //</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">单个库通常不需要指定目标</span></span></code></pre></div><p>在路径helloproject/CmakeLists.txt 中</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">···</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#include_directories(\${CMAKE_SOURCE_DIR}/mylib/) #指定头文件搜索路径</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">find_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(test_path </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">NAMES</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> test</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> PATHS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ./lib)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(STATUS </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;库全路径为 \${test_path}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">find_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          &lt;VAR&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">          name</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">NAMES</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> name1 [name2 ...] [NAMES_PER_DIR]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [HINTS [</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">path</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | ENV var]...]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">PATHS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">path</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | ENV var]...]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [REGISTRY_VIEW (64|32|64_32|32_64|HOST|</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">TARGET</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">|BOTH)]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [PATH_SUFFIXES suffix1 [suffix2 ...]]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [VALIDATOR function]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">DOC</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &quot;cache documentation string&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [NO_CACHE]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [REQUIRED]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [NO_DEFAULT_PATH]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [NO_PACKAGE_ROOT_PATH]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [NO_CMAKE_PATH]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [NO_CMAKE_ENVIRONMENT_PATH]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [NO_SYSTEM_ENVIRONMENT_PATH]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [NO_CMAKE_SYSTEM_PATH]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [NO_CMAKE_INSTALL_PREFIX]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [CMAKE_FIND_ROOT_PATH_BOTH |</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">           ONLY_CMAKE_FIND_ROOT_PATH |</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">           NO_CMAKE_FIND_ROOT_PATH]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">         )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>&lt;VAR&gt; :首个参数指定查找结果作为变量 (库的全路径包括后缀) 上述命令中为 test_path 当库未被找到，&lt;var&gt;中存放的值为<code>\\&lt;var\\&gt;-NOTFOUND</code>。 NO_CACHE 项 只要&lt;var&gt;中的值不是<code>\\&lt;var\\&gt;-NOTFOUND</code>(或有值)，那么即使多次调用find_library，&lt;var&gt;也不会再刷新(只要找到一个&lt;var&gt;，后续每次执行cmake命令得到的&lt;var&gt;都是首次找到的&lt;var&gt;值（除非清除CMakeCache.txt文件)。该选项将&lt;var&gt;变量当成一个普通变量而不是一个缓存条目，需要cmake 3.21及以上的版本支持(理解为全局变量，且会写入CMakeCache.txt文件，在不清除CMakeCache.txt文件的情况下，每次执行cmake都会先从CMakeCache.txt载入该变量的值)</p></div><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">//例</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">make_minimum_required (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VERSION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 3.21)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">project</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (fl)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">find_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (libvar mymath </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">PATHS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ./mylib NO_CACHE)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">find_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (libvar mymath </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">PATHS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ./lib NO_CACHE) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 即使./lib中也存在mymath库，由于在上一步的./mylib中已经找到，因此本条命令不会执行查找</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${libvar}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> STREQUAL</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &quot;libvar-NOTFOUND&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (FATAL_ERROR </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;required mymath library but not found!&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (STATUS </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;mymath library found in \${libvar}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endif</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">//例</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">make_minimum_required (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VERSION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 3.21)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">project</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (fl)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">find_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (libvar mymath </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">PATHS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ./mylib) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># libvar是缓存条目，会存入\`CMakeCache.txt\`，后续即使把PATHS ./mylib改成PATHS ./mylib2（不存在库mymath），也不会保存，因为libvar变量已经从缓存中载入</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${libvar}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> STREQUAL</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &quot;libvar-NOTFOUND&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (FATAL_ERROR </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;required mymath library but not found!&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (STATUS </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;mymath library found in \${libvar}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endif</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NAMES或name: 指定一个或多个库的名字 上述命令中为 NAMES test</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>[PATHS [path | ENV var]...]或[HINTS [path | ENV var]...]: 可选项 指定搜索库的路径 上述命令中为 PATHS ./lib 同时可以指定环境变量 <code>find_library (libvar mymath PATHS ENV TESTPATH)</code> 指定环境变量TESTPATH 为查找路径 假设环境变量被设置为./lib</p></div><p>REQUIRED：指定该选项后，当找不到库，会输出一条错误信息并终止cmake处理过程；未指定REQUIRED选项，当find_library未找到库时，后续find_library有针对&lt;var&gt;的调用会继续查找。该选项需要cmake 3.18及以上的版本支持</p><p>PATH_SUFFIXES：为每个搜索目录添加变量PATH_SUFFIXES指定的后缀目录，假设当前搜索的目录为/A;/C/D，PATH_SUFFIXES指定的后缀目录为PS(当前可以指定多个，以分号分割开即可)，那么除了/A;/C/D之外，/A/PS;/C/D/PS也会被搜索</p><div class="language-cmake" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">find_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (libvar mymath </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">PATHS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ./ PATH_SUFFIXES mylib) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 会从./以及./mylib中搜索指定的mymath库是否存在</span></span></code></pre></div><p>CMAKE_FIND_ROOT_PATH：指定搜索的根路径</p><p>CMAKE_SYSROOT：该选项的值会传递给编译器的--sysroot标记(--sysroot用于指定编译搜索库和头文件的根目的，例如编译器原本搜搜索/A/include和/A/lib，使用--sysroot=DIR后，编译器搜索的库和头文件目录变成/DIR/A/include和/DIR/A/lib) NO_DEFAULT_PATH:如果指定了，默认搜索路径不会生效 默认搜索路径:CMAKE_LIBRARY_ARCHITECTURE、CMAKE_PREFIX_PATH、CMAKE_LIBRARY_PATH、CMAKE_FRAMEWORK_PATH 指定的路径或 系统环境变量（例如系统环境变量LIB和PATH定义的路径）、系统的默认的库安装路径,例如/usr、/usr/lib等</p><div class="vp-steps"><p>1.先找包路径&lt;PackageName&gt;_ROOT(NO_PACKAGE_ROOT_PATH 或CMAKE_FIND_USE_PACKAGE_ROOT_PATH 为 FALSE则跳过) &lt;CurrentPackage&gt;_ROOT, ENV{&lt;CurrentPackage&gt;_ROOT}, &lt;ParentPackage&gt;_ROOT, ENV{&lt;ParentPackage&gt;_ROOT} 2.cmake缓存变量，即命令行中 -D &lt;VAR&gt;=value 设置的变量 例如<code>cmake . -DCMAKE_XXX_PATH=D:xxx\\xxx</code> (NO_CMAKE_PATH 如果设置了此项或CMAKE_FIND_USE_CMAKE_PATH 为 FALSE 则跳过) other 3.cmake指定的环境变量 CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH (设置此项为FALSE或NO_CMAKE_ENVIRONMENT_PATH 跳过此过程) other 4.HINT 指定的路径 HINT使用系统内计算的软路径，相对路径 ,PATH指定硬编码的路径 5.编译环境的系统环境变量(例如系统环境变量LIB和PATH定义的路径) (NO_SYSTEM_ENVIRONMENT_PATH或CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH 为FALSE 时跳过) 6.当前系统平台中相关的cmake变量(系统的默认的库安装路径) (CMAKE_INSTALL_PREFIX 和 CMAKE_STAGING_PREFIX) NO_CMAKE_SYSTEM_PATH或 CMAKE_FIND_USE_CMAKE_SYSTEM_PATH 为 FALSE 可以跳过所有这些路径搜索 other(关联路径替换为 CMAKE_SYSTEM_PREFIX_PATH 默认前缀 Windows下的/XXXX/Program Files，Linux下的/usr或/usr/local 查找时替换为/XXXX/Program Files/lib , /usr/local/lib进行搜索 CMAKE_SYSTEM_LIBRARY_PATH 默认是当前系统的标准目录</p><p>CMAKE_SYSTEM_FRAMEWORK_PATH 给macOS用，其框架路径 ) 通常是已安装的软件的位置，比如Linux下软件安装到/usr/local</p><p>7.PATHS指定路径 或 简短版本 find_library (&lt;VAR&gt; name1 [path1 path2 ...])中的的路径path1,path2...</p><p>指定如下这些变量也能忽略上述查找 CMAKE_IGNORE_PATH, CMAKE_IGNORE_PREFIX_PATH, CMAKE_SYSTEM_IGNORE_PATH and CMAKE_SYSTEM_IGNORE_PREFIX_PATH</p><p>other： &lt;prefix&gt;/lib/&lt;arch&gt; CMAKE_LIBRARY_ARCHITECTURE 如果该变量被设置，那么会搜索目录<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi>C</mi><mi>M</mi><mi>A</mi><mi>K</mi><msub><mi>E</mi><mi>P</mi></msub><mi>R</mi><mi>E</mi><mi>F</mi><mi>I</mi><msub><mi>X</mi><mi>P</mi></msub><mi>A</mi><mi>T</mi><mi>H</mi></mrow><mi mathvariant="normal">/</mi><mi>l</mi><mi>i</mi><mi>b</mi><mi mathvariant="normal">/</mi></mrow><annotation encoding="application/x-tex">{CMAKE_PREFIX_PATH}/lib/</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">CM</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.13889em;">REF</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">ib</span><span class="mord">/</span></span></span></span>{CMAKE_LIBRARY_ARCHITECTURE} CMAKE_PREFIX_PATH 多个前缀以分号分隔 比如 CMAKE_PREFIX_PATH=A;B 那么会为\${CMAKE_PREFIX_PATH}/lib 即 A/lib ,B/lib中查找库 CMAKE_LIBRARY_PATH 指定find_library的库查找目录，默认值为空，多个值时需要以分号分割列表指定</p><p>CMAKE_FRAMEWORK_PATH 给macOS 用的 &lt;prefix&gt;/lib/</p></div><p>默认搜索路径需要涵盖最常用和最不常用的情况，通常 使用NO前缀项忽略 find_library (&lt;VAR&gt; NAMES name PATHS paths... NO_DEFAULT_PATH) find_library (&lt;VAR&gt; NAMES name) NAMES 指定多个名字时，默认每个路径都搜索一遍该名字 (一个名字在多个文件夹搜索) NAMES_PER_DIR 选项 指定一次考虑一个文件夹(路径)每次搜索所有名字 (多个名字在一个文件夹检索) 查找库名字时先原样查找 给什么查什么 比如 <code>find_library (lib NAMES mylib PATHS &quot;D:\\xxx\\xxx&quot; NO_DEFAULT_PATH)</code> 那么先查找<code>mylib</code> 某些平台规定的前后缀(例如.lib或.so)由 CMAKE_FIND_LIBRARY_PREFIXES 和CMAKE_FIND_LIBRARY_SUFFIXES 变量指定 。当然也可以直接写明后缀。如mylib.a(unix) mylib.lib(win)</p><p>如果目标库是框架 &lt;VAR&gt;变量存储目标库的全路径 &lt;fullPath&gt;/A.framework,当框架被当作库使用时 使用-framework A, 和 -F&lt;fullPath&gt; 链接框架到目标</p><p>如果指定了自定义搜索路径前缀 CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX 那么搜索时的 前缀路径lib/ 会替换为 \${CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX}/(同样存lib32,libx32,lib64 版本) project()命令启动时如果设置了至少一种语言 那么会自动设置此类变量</p><p>FIND_LIBRARY_USE_LIB32_PATHS(同样存lib32,libx32,lib64 版本) 在搜索路径中匹配到lib/后，会为这个目录添加一个后缀，然后在添加后缀后的目录中搜索库</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">cmake_minimum_required</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VERSION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 3.21)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">project</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (fl)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">find_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (libvar mymath </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">PATHS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ./lib) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 假设lib目录不存在但是lib64目录存在</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${libvar}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> STREQUAL</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &quot;libvar-NOTFOUND&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (FATAL_ERROR </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;required mymath library but not found!&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (STATUS </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;mymath library found in \${libvar}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endif</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">// 命令行中执行</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cmake .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">// 执行结果</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">-- mymath library found in /XXX/lib64/libmymath.a</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cmake的构建命令" tabindex="-1"><a class="header-anchor" href="#cmake的构建命令"><span>cmake的构建命令</span></a></h3><p>如果你使用 cmake --build 而不是直接调用更底层的构建系统（译者注：比如直接使用 make），你可以用 -v 参数在构建时获得详细的输出（CMake 3.14+），用 -j N 指定用 N 个 CPU 核心并行构建项目（CMake 3.12+），以及用 --target（任意版本的 CMake）或 -t（CMake 3.15+）来选择一个目标进行部分地构建。这些命令因不同的构建系统而异，例如 VERBOSE=1 make 和 ninja -v。你也可以使用环境变量替代它们，例如 CMAKE_BUILD_PARALLEL_LEVEL (CMake 3.12+) 和 VERBOSE (CMake 3.14+)。</p><h3 id="cmake-add-custom-command-命令" tabindex="-1"><a class="header-anchor" href="#cmake-add-custom-command-命令"><span>cmake add_custom_command 命令</span></a></h3><p>还有一个相关的函数 <code>add_custtom_target</code> add_custom_command 有一些典型用法 见cmake文档里的<a href="https://cmake.org/cmake/help/latest/command/add_custom_command.html#examples-generating-files" target="_blank" rel="noopener noreferrer">链接</a> 典型用法 1.构建动态库前使用代码生成工具生成源文件参与构建 2.在构建事件后执行复制dll到可执行文件夹下，或在构建后执行清理操作</p><p>函数原型就不列出了 之说几个重要的参数 第一个重载 :生成文件 第二个重载:构建事件</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_custom_command</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT output1 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">output2 ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                   COMMAND command1 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ARGS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">args1...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                   ...</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">其他参数</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                   )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_custom_command</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TARGET </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">target</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                   PRE_BUILD </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> PRE_LINK </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> POST_BUILD</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                   COMMAND command1 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ARGS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">args1...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                   ...</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">其他参数</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                   )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OUTPUT 指定生成的文件创建在和当前cmakelist同一路径中 只要没有这些文件就会执行命令</p><p>COMMAND 后跟实际需要执行的执行，一般是命令行指令，也可以是可执行文件,python命令，自定义脚本凡是能在命令行执行的都能在这里设置</p><p>DEPENDS 指定依赖项 当依赖项变动时会执行命令。时间戳</p><blockquote><p>If DEPENDS is not specified, the command will run whenever the OUTPUT is missing 不指定DEPENDS 那么OUTPUT缺失每次都会执行</p></blockquote><p>graph LR D[DEPENDS 指定的目标/文件] --&gt; C[自定义命令] C --&gt; O[OUTPUT 生成的文件]</p><p>依赖项除了文件还能是由add_custom_target 或 add_library/add_executable 创建的目标。</p><p>如果依赖了 目标target 那么此命令会在任何依赖的目标生成前执行。这建立了一个执行命令/生成文件-&gt;构建目标的依赖关系</p><p>可执行文件或库 则建立文件级别依赖。那么只要重新编译了那么就会执行改命令</p><p>已经添加到生成目标的源文件 如<code>add_executable(cmakestudy main.cpp )</code> 里的main.cpp 也会建立文件级别依赖</p><p>依赖绝对路径和相对路径的化也会建立文件级别依赖</p><p>如果未指定DEPENDS,则命令将在OUTPUT缺失时运行；如果命令实际上没有创建 OUTPUT, 则规则将始终运行</p><p>BYPRODUCTS 非主要构建产物(副产品) ninja明确支持</p><blockquote><p>Specify the files the command is expected to produce but whose modification time may or may not be newer than the dependencies. 指定生成的文件可能会比依赖项更新，或者不更新。这个解释好拗口，大致意思是，这是副产品有时候生成有时候不生成，这时候依赖副产品的构建可能就会出问题,你指定了这是副产品，那么Ninja生成器就能处理正确依赖，在你不能保证生成最新的文件时候依然能构建。</p></blockquote><p>COMMENT 在构建时在执行命令之前输出注释</p><p>VERBATIM 告诉cmake 执行的命令的参数不要转义，原样传递给命令</p><p>WORKING_DIRECTORY 执行命令前会从cd到该参数指定的路径下</p><p>第二个重载</p><p>TARGET 依赖的目标 依赖目标变动(该命令会被当做目标构建的一部分)才会执行,换句话说只有目标被构建的时候才会执行,如果目标源文件不变 <code>cmake --build . --target hello</code> 这个命令执行第一次会执行一次命令。再次生成目标，因为源代码没变不需要重新构建所以该命令不会执行。</p><p>PRE_BUILD | PRE_LINK | POST_BUILD 命令执行的时机 构建前 链接前 构建后</p><blockquote><p>This option has unique behavior for the Visual Studio Generators. When using one of the Visual Studio generators, the command will run before any other rules are executed within the target. With all other generators, this option behaves the same as PRE_LINK instead. Because of this, it is recommended to avoid using PRE_BUILD except when it is known that a Visual Studio generator is being used 这里单独解释了 PRE_BUILD 对于vs生成器来说,使用此参数会在任意构建行为前执行，对其他生成器,PRE_BUILD和PRE_LINK效果一样,别生成器可能不支持此参数,我用Ninja是这样的</p></blockquote><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_custom_command(</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    TARGET</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hello</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    PRE_BUILD</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    COMMAND</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CMAKE_COMMAND</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -E</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">This is a pre-build command for hello target</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    COMMENT</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Pre-build command for hello target</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">proc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 正在执行命令:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> D:...</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\c</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">make</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\b</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">in</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\c</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">make.EXE</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --build</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> C:.../deve_env/build/clang-msvc-clangd-debug</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --target</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hello</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1/5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> generate_time-alawys</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">2/5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Generating output files-DEPENDS</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">3/5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Generating CXX dyndep file CMakeFiles/hello.dir/CXX.dd</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">4/4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Linking CXX executable C:...deve_env</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\o</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ut</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\h</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ello.exe</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> This is a pre-build command </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> hello target</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">driver</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 生成完毕: 00:00:02.193</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 生成已完成，退出代码为 0</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">//换成PRE_LINK</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">proc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 正在执行命令: D:..</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\c</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">make</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\b</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">in</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\c</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">make.EXE --build C:.../deve_env/build/clang-msvc-clangd-debug --target hello --</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1/5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> generate_time-alawys</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">2/5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Generating output files-DEPENDS</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">3/5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Generating CXX dyndep file CMakeFiles/hello.dir/CXX.dd</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">4/4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Linking CXX executable C:...</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\d</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">eve_env</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\o</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ut</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\h</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ello.exe</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> This is a pre-link command </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> hello target</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">driver</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 生成完毕: 00:00:01.963</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 生成已完成，退出代码为 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很奇怪的是这里COMMENT没打印出来,而且echo消息都是在链接后打印出来的,可能Ninja编译期都不支持此参数？这个需要查一下文档</p><p>这个重载用法基本上就是 构建后复制、签名、打包</p><p>用的少的参数 APPEND 在COMMAND后添加命令 注意COMMAND 可以加很多行 没用过</p><p>USES_TERMINAL 指定使用的终端 和APPEND 不能一起使用。对于Ninja生成器这会把命令放在console pool中(因为ninja可以并发构建)</p><p>JOB_POOL 任务池 Ninja专用的</p><p>JOB_SERVER_AWARE 给makefile用的 没去了解</p><p>例子</p><div class="language-c" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_custom_command</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    TARGET cmakestudy</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    PRE_LINK</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    COMMAND $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CMAKE_COMMAND</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">E echo </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">testfile2</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> output2.txt</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    COMMENT </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">test for pre_link output file2</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    WORKING_DIRECTORY $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CMAKE_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    VERBATIM</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>关于这个命令我搜到一个<a href="https://discourse.cmake.org/t/define-a-pre-build-command-without-creating-a-new-target/1623/3" target="_blank" rel="noopener noreferrer">问题</a> 利用</p><blockquote><p>If <code>DEPENDS</code> is not specified, the command will run whenever the <code>OUTPUT</code> is missing; if the command does not actually create the OUTPUT, the rule will always run.</p></blockquote><p>OUTPUT 指定一个虚拟文件,实际命令中不生成他,以此来每次构建时都执行该命令</p><div class="language-" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>add_custom_command(OUTPUT &quot;foo&quot; &quot;\${VisualT_BINARY_DIR}/src/buildDate.h&quot;</span></span>
<span class="line"><span>                   COMMAND \${CMAKE_COMMAND} -P &quot;\${VisualT_BINARY_DIR}/cmake/ConfigureBuildDate.cmake&quot;</span></span>
<span class="line"><span>                   COMMENT &quot;generating build date header&quot;</span></span>
<span class="line"><span>                   )</span></span>
<span class="line"><span>add_library(VisualT_library SHARED &quot;\${private_headers}&quot; &quot;\${public_headers}&quot; &quot;\${sources}&quot;) #buildDate.h is contained in &quot;private_headers&quot;</span></span></code></pre></div><p>这里不生产foo 让每次构建VisualT_library 时都执行ConfigureBuildDate脚本 实际确实有时候执行有时候不执行。有时候执行两次 这个问题和Makefile相关 <a href="https://gitlab.kitware.com/cmake/cmake/-/issues/21061" target="_blank" rel="noopener noreferrer">解决方案</a></p><p>在学习此命令时,我问了deepseek：add_custom_command 什么时候才会执行 他告诉我三种情况 1.OUTPUT 生成的文件不存在时 2.DEPENDS 中依赖的文件比OUTPUT文件更新时 3.</p><p>例一 一开始我写一个规则</p><div class="language-c" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_custom_command</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    OUTPUT $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    COMMAND $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CMAKE_COMMAND</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">P echo </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    WORKING_DIRECTORY $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    COMMENT </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Generating output files-DEPENDS</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    VERBATIM</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>然后没有指定任何依赖,配置后点击生成,构建时COMMENT没打印，也没文件生成,后来我才明白要让生成文件参与目标的构建，被构建目标依赖命令才会执行。按照cmake文档的实例,文档中依靠工具生成模板.c文件然后添加到构建目标的依赖中,在构建目标生成之前,该命令会执行。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_executable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">hello main.cpp $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_library</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">lib xx.cpp $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//这样不行,添加依赖只能添加目标的依赖而不能是文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_dependencies</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">hello $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//但是自定义创建一个目标再令其依赖\${OUTPUT2}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_custom_target</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    test1</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    DEPENDS $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    WORKING_DIRECTORY $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    COMMENT </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">generate_time2-alawys</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    VERBATIM</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//再令该目标与生成的目标建立依赖</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_dependencies</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">hello </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">test1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//或手动构建该目标</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cmake </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">build. </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">--</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">target test1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>都可以执行生成\${OUTPUT2}的命令 注意需要在构建目标的过程中形成依赖,我一开始的错误是即使没有将依赖连接到构建目标上,所以命令根本不会执行</p><p>例2 这个例子是我当初想要试试<code>add_custom_command</code> 是否真的依赖DEPENDS 声明的文件或目标;根据依赖比OUTPUT生成文件要新从而生成文件,我写了如下测试</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">set</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT1 $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">log.txt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">set</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT2 $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">log2.txt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_custom_command</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    OUTPUT $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    COMMAND echo </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">This is a custom command that generates output files</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    WORKING_DIRECTORY $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    COMMENT </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Generating output files1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    VERBATIM</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_custom_command</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    OUTPUT $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    COMMAND echo </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">This is a custom command that generates output files</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    BYPRODUCTS $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    WORKING_DIRECTORY $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    COMMENT </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Generating output files2</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    VERBATIM</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_executable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">hello main.cpp $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我很快就发现了问题,\${OUTPUT1}每次生成的内容都是一样的,所以依赖项不会更新,即使修改源码重新构建也只会执行配置后开始的第一次。 注意Ninja是增量构建，如果文件没有变动反复生成同一目标实际是不会构建的只会报 [build] ninja: no work to do.</p><p>所以我寄希望与生成当前时间写入文件中(这样就不需要我每次都手动改动文件来观测了),我的期望是每次生成时写入新的当前时间到<code>\${OUTPUT1}</code>,因为生成<code>\${OUTPUT2}</code>依赖<code>\${OUTPUT1}</code>,所以命令 Generating output files2 总会执行。 我新增如下测试</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//新增和修改部分,其他地方和之前一致</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TIMESTAMP TIME_NOW </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">m-</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">H:</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">M:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%S</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">STATUS </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">当前时间: \${TIME_NOW}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_custom_command</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    OUTPUT $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    COMMAND echo </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">This is time is\${TIME_NOW}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    WORKING_DIRECTORY $</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    COMMENT </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Generating output files1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    VERBATIM</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该测试也只是在第一次配置后执行，之后就不执行了。 分析一下 目标hello依赖 <code>\${OUTPUT2}</code>,<code>\${OUTPUT2}</code>依赖<code>\${OUTPUT1}</code></p><p><code>\${OUTPUT1}-&gt;\${OUTPUT2}-&gt;hello</code> 很明显OUTPUT1是没有依赖的,所以生成后只要该文件不删除那么就不会执行,所以OUTPUT2也不会执行。 随机我使用add_custom_target,以为目标默认都不是最新的所以每次都会执行构建行为</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">string(TIMESTAMP</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> TIME_NOW</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">%m-%d-%H:%M:%S</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">OUTPUT1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/log.txt</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">OUTPUT2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/log2.txt</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">message(STATUS</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">当前时间: </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">TIME_NOW</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_custom_target(</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    alawys_run</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    COMMAND</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">This is time is</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">TIME_NOW</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OUTPUT1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    BYPRODUCTS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OUTPUT1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    WORKING_DIRECTORY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    COMMENT</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Generating output files1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    VERBATIM</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_custom_command(</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    OUTPUT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OUTPUT2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    COMMAND</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">This is a custom command that generates output files</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OUTPUT2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    DEPENDS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OUTPUT1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    WORKING_DIRECTORY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    COMMENT</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Generating output files2</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    VERBATIM</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_executable(hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main.cpp</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_dependencies(hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> alawys_run</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让hello依赖alawys_run ,<code>\${OUTPUT2}</code> 再依赖alawys_run的生成文件<code>\${OUTPUT1}</code>。按道理,这两个命令都会执行的，但实际是只执行一次就歇菜了。这是为什么呢？我搞了好久才明白</p><div class="language-shell" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">string(TIMESTAMP</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> TIME_NOW</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">%m-%d-%H:%M:%S</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre></div><p>这里生成的时间戳是静态的,每次configure也就是 cmake --build ./build -G ninja -S.的时候就生成了,之后每次构建时间就是相同的，要想动态的只能使用脚本. 我在Windows上构建,Powershell脚本很简单</p><div class="language-shell" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#ps1</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$time</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> = Get-Date -Format </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">MM-dd-HH:mm:ss</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Add-Content</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -Path</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">log.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -Value</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $time</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#cmake 脚本</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">string(TIMESTAMP</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> now</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">%m-%d-%H:%M:%S</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">file(APPEND</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log2.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">now</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre></div><p>调用脚本才能动态生成时间。</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">OUTPUT1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/script/log.txt</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">OUTPUT2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/script/log2.txt</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 强制每次都执行</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_custom_target(</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    generate_time</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    COMMAND</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> powershell</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -ExecutionPolicy</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Bypass</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -File</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./cr_time.ps1</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    #DEPENDS \${OUTPUT1}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    BYPRODUCTS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OUTPUT1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    WORKING_DIRECTORY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/script</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    COMMENT</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">generate_time-alawys</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    VERBATIM</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#上下两个脚本执行一个就行了</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_custom_target(</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    generate_time2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    DEPENDS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OUTPUT2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    #DEPENDS \${CMAKE_CURRENT_SOURCE_DIR}/script/TEST.txt</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    WORKING_DIRECTORY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/script</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    COMMENT</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">generate_time2-alawys</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    VERBATIM</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_custom_command(</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    OUTPUT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OUTPUT2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    COMMAND</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CMAKE_COMMAND</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/script/cr_time_c.cmake</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    DEPENDS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OUTPUT1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    WORKING_DIRECTORY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/script</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    COMMENT</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Generating output files-DEPENDS</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    VERBATIM</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_executable(hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main.cpp</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#这里选择执行哪个就添加哪个做依赖</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_dependencies(hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> generate_time</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> generate_time2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="add-custom-target" tabindex="-1"><a class="header-anchor" href="#add-custom-target"><span>add_custom_target</span></a></h3><p>首先声明一点 现代cmake构建是以target(目标)来构建代码的 ,创建目标避免声明式的全局依赖 之前都是用类似<code>include_directories</code>，<code>link_directories</code> 这种命令这种命令是全局在子项目头文件和链接库也会包含进来 为了更好更模块化的项目管理构建 使用面向目标的命令 <code>add_custom_target</code> 正是有别于 <code>add_library</code>和<code>add_executable</code> 创建一个自定义目标 这个目标不一定需要生成目标,通常执行一些外部脚本,例如编写c++程序需要一些前置文件,由python脚本或其他语言的现有程序生成,那么以此创建一个目标来执行命令更加符合现代cmake的用法 首先熟悉一下该命令的参数</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_custom_target(Name</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [ALL] </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">command1 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">args1...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">COMMAND command2 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">args2...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">DEPENDS depend depend depend ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">BYPRODUCTS </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">files...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">WORKING_DIRECTORY dir</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">COMMENT comment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">JOB_POOL job_pool</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">JOB_SERVER_AWARE </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">bool</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">VERBATIM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">USES_TERMINAL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">COMMAND_EXPAND_LISTS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                  [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">SOURCES src1 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">src2...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Name 不必多说 目标的名字</p><p>ALL 用来指示是否作为默认构建的目标 当我们执行<code>cmake --build .</code> 而不在最后指定目标时 指示这个会在我们构建全部目标时把此目标加入构建 后面的 可以跟命令 但这是隐式的行为 一般使用 COMMAND声明 后写命令</p><p>COMMAND 传入的命令 多个命令按顺序执行 但不构成有状态的偏序 也就说 假如 命令1:创建文本1-&gt;命令2:读取文本1创建文本2-&gt;命令3:读取文本2创建文本3 这种有状态的脚本cmake command干不了;要执行完整的的脚本需使用<code>configure_file()</code>或<code>file(GENERATE)</code> 该命令同时可以把其他<code>add_executable</code> 创建的目标作为参数 也就说可以先生成其他可执行文件,再执行作为此次构建的依赖 (但要保证目标不是交叉编译的产物--废话！有例外但不用关注) COMMAND 的参数可以使用 生存器表达式</p><p>TARGET_FILE</p><p>TARGET_LINKER_FILE</p><p>TARGET_SONAME_FILE</p><p>TARGET_PDB_FILE</p><p>使用这些作为生成器表达式时会生成依赖链,保证用到的时候生成</p><p>BYPRODUCTS 命令执行的副产物 命令不一定每一次执行都生成一个一定的文件所以叫副产物,有时生成有时不生成.这玩意可以提供依赖无论是 <code>add_custom_target</code> 还是 <code>add_custon_command add_dependencies</code> 用此声明的名字 都可以作为这些命令的DEPENDS 的依赖项 cmake文档说明ninja 明确支持BYPRODUCTS 这个参数的 ninja编译器会在 副产物缺失时生成(存在的时根据命令是否更新) 以保证 构建依赖项存在依赖 可以使用一些生成表达式 一些其他说明无关紧要必要时参考cmake文本</p><p>WORKING_DIRECTORY 命令执行时的路径 可以使用生成器表达式</p><p>COMMENT 构建时echo 命令行的提示信息 可以使用生成器表达式</p><p>DEPENDS 类似 add_custon_command页的介绍 也可以依赖 同一cmakelist 文件中 add_custom_command() 创建的OUTPUT的文件和依赖的文件项</p><p>COMMAND_EXPAND_LISTS 让 COMMAND 中的参数列表会展开 假如你传的是\${MY_ARGS} 这样一个变量 这个变量包含多个参数 会当整个字符串都当一个参数传进去 展开什么效果我也没试试 <code>⚠</code></p><p>​​SOURCES​ 指定该目标的源文件 这些文件不会参与编译不影响构建 这是给VSCODE CLINO 这些IDE的插件看到你定义了这个目标就会在图形化界面里添加到该目标下面方便你编辑和管理</p><p>VERBATIM 转义的传入参数为了原样传入参数 也就说不用写 \\a &quot; 这样的转义符cmake自动帮你转义</p><p>JOB_POOLS ninja这些多线程构建器会使用 和 USES_TERMINAL 不兼容 不深入构建不用过多关注 因为cmake需要兼容多个生成器所以有些参数不那么重要却要覆盖所有生成器</p><p>注意- 这里渲染一下 该命令是在执行 <code>cmake --build .</code> 也就是调用内部生成器构建编译代码时执行的 ,add_custom_target 在语义上 只有生成的副产品而没有生成文件,cmake文档明确说:就算生成和目标同名的文件都会当做过时的所以只要添加依赖,每次构建都会生成 所以用来生产时构建时日志</p><h3 id="生成器表达式" tabindex="-1"><a class="header-anchor" href="#生成器表达式"><span>生成器表达式</span></a></h3><p>用于在生成阶段而不是配置阶段生成数据,一般用来生成路径</p><h3 id="find-package" tabindex="-1"><a class="header-anchor" href="#find-package"><span>find_package</span></a></h3><h3 id="install" tabindex="-1"><a class="header-anchor" href="#install"><span>install</span></a></h3><h3 id="cpack-生成安装包" tabindex="-1"><a class="header-anchor" href="#cpack-生成安装包"><span>CPack 生成安装包</span></a></h3>`,106))])}const V=k(A,[["render",H],["__file","index.html.vue"]]),Y=JSON.parse('{"path":"/article/bijxvme0/","title":"编写cmake","lang":"zh-CN","frontmatter":{"title":"编写cmake","createTime":"2024/12/26 22:32:41","permalink":"/article/bijxvme0/","description":"cmake 各变量名字 PROJECT_SOURCE_DIR 表示当前项目的根目录也就是当前cmakelist文件所在路径。调用project(xxx)指定项目后的源代码目录 PROJECT_BINARY_DIR 项目的构建目录通常都在构建文件夹下(build)文件夹下 当使用Bbuild 或指定构建文件夹. CMAKE_CURRENT_SOURCE_...","head":[["meta",{"property":"og:url","content":"https://github.com/Yuzhiy05/Yuzhiy05.github.io/article/bijxvme0/"}],["meta",{"property":"og:title","content":"编写cmake"}],["meta",{"property":"og:description","content":"cmake 各变量名字 PROJECT_SOURCE_DIR 表示当前项目的根目录也就是当前cmakelist文件所在路径。调用project(xxx)指定项目后的源代码目录 PROJECT_BINARY_DIR 项目的构建目录通常都在构建文件夹下(build)文件夹下 当使用Bbuild 或指定构建文件夹. CMAKE_CURRENT_SOURCE_..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-11T16:37:12.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-11T16:37:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编写cmake\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-11T16:37:12.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"列出所有源码","slug":"列出所有源码","link":"#列出所有源码","children":[]},{"level":3,"title":"引入第三方静态库","slug":"引入第三方静态库","link":"#引入第三方静态库","children":[]},{"level":3,"title":"cmake的构建命令","slug":"cmake的构建命令","link":"#cmake的构建命令","children":[]},{"level":3,"title":"cmake add_custom_command 命令","slug":"cmake-add-custom-command-命令","link":"#cmake-add-custom-command-命令","children":[]},{"level":3,"title":"add_custom_target","slug":"add-custom-target","link":"#add-custom-target","children":[]},{"level":3,"title":"生成器表达式","slug":"生成器表达式","link":"#生成器表达式","children":[]},{"level":3,"title":"find_package","slug":"find-package","link":"#find-package","children":[]},{"level":3,"title":"install","slug":"install","link":"#install","children":[]},{"level":3,"title":"CPack 生成安装包","slug":"cpack-生成安装包","link":"#cpack-生成安装包","children":[]}],"readingTime":{"minutes":23.77,"words":7131},"git":{"createdTime":1735224313000,"updatedTime":1760200632000,"contributors":[{"name":"ImoutoCon1999","email":"ImoutoCon1999@outlook.com","commits":13},{"name":"Yuzhiy05","email":"ImoutoCon1999@outlook.com","commits":4}]},"autoDesc":true,"filePathRelative":"tools/编写cmake.md","categoryList":[{"id":"4a9315","sort":10001,"name":"tools"}],"bulletin":false}');export{V as comp,Y as data};
