import{_ as i,c as a,b as t,o as n}from"./app-Bb1tC85q.js";const e={};function p(h,s){return n(),a("div",null,s[0]||(s[0]=[t(`<p>为了减少泛型 造成的代码膨胀 CLR会只编译一次泛型类的方法 ？(待验证)</p><p><code>List&lt;String&gt;和List&lt;stream&gt;</code> 中的编译的方法能共享，因为引用类型的变量都是指向堆上的32/64位的指针</p><p>值类型大小不一，泛型生成的方法不能公用。即使大小一样Int32和UInt32也不能共用，因为生成的指令不一样</p><p>c#泛型中的类型参数的操作数，无法应用操作符</p><div class="language-c#" data-ext="c#" data-title="c#"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> T</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> sum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> num</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">where</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> struct</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">     T</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> sum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> default</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">     for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">default</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">num</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">n</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">     {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">         sum</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">     }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">     return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> sum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span></code></pre></div><p>这个例子编译器会报错: error CS0019: 运算符“&lt;”无法应用于“T”和“T”类型的操作数 error CS0023: 运算符“++”无法应用于“T”类型的操作数 error CS0019: 运算符“+=”无法应用于“T”和“T”类型的操作数</p><p>这有点反直觉</p><p>泛型推导,少写参数?</p><p>泛型参数的协变逆变?</p><div class="language-c#" data-ext="c#" data-title="c#"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">in</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//这个模板参数能接受的类型，不限于T 具体有哪些继承?需要讨论</span></span></code></pre></div>`,10)]))}const k=i(e,[["render",p],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/article/830z8gu7/","title":"C#泛型","lang":"zh-CN","frontmatter":{"title":"C#泛型","createTime":"2025/05/21 22:34:42","permalink":"/article/830z8gu7/","description":"为了减少泛型 造成的代码膨胀 CLR会只编译一次泛型类的方法 ？(待验证) List<String>和List<stream> 中的编译的方法能共享，因为引用类型的变量都是指向堆上的32/64位的指针 值类型大小不一，泛型生成的方法不能公用。即使大小一样Int32和UInt32也不能共用，因为生成的指令不一样 c#泛型中的类型参数的操作数，无法应用操作...","head":[["meta",{"property":"og:url","content":"https://github.com/Yuzhiy05/Yuzhiy05.github.io/article/830z8gu7/"}],["meta",{"property":"og:title","content":"C#泛型"}],["meta",{"property":"og:description","content":"为了减少泛型 造成的代码膨胀 CLR会只编译一次泛型类的方法 ？(待验证) List<String>和List<stream> 中的编译的方法能共享，因为引用类型的变量都是指向堆上的32/64位的指针 值类型大小不一，泛型生成的方法不能公用。即使大小一样Int32和UInt32也不能共用，因为生成的指令不一样 c#泛型中的类型参数的操作数，无法应用操作..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-09T02:59:05.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-09T02:59:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C#泛型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-09T02:59:05.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":0.97,"words":290},"git":{"createdTime":1748185806000,"updatedTime":1757386745000,"contributors":[{"name":"Yuzhiy05","email":"ImoutoCon1999@outlook.com","commits":1}]},"autoDesc":true,"filePathRelative":"5.csharp/C#泛型.md","categoryList":[{"id":"9ec59e","sort":5,"name":"csharp"}],"bulletin":false}');export{k as comp,r as data};
